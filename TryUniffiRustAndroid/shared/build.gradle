plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.mozilla.rust-android-gradle.rust-android'
}

android {
    namespace 'com.example.shared'
    compileSdk 34

    ndkVersion "25.2.9519653"

    defaultConfig {
        minSdk 33
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += "${projectDir}/../../shared_klc/src/androidBindings"
    }
}

dependencies {
    implementation "net.java.dev.jna:jna:5.13.0@aar"

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    module = "../.."
    libname = "shared_klc"
    // these are the four recommended targets for Android that will ensure your library works on all mainline android devices
    // make sure you have included the rust toolchain for each of these targets: \
    // `rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android`
    targets = ["arm", "arm64", "x86", "x86_64"]
    extraCargoBuildArguments = ['--package', 'shared_klc']
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.configureEach { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"

        tasks.named("compileDebugKotlin") {
            it.dependsOn(tasks.named("bindGen"))
        }

        tasks.named("generate${productFlavor}${buildType}Assets") {
            it.dependsOn(tasks.named("cargoBuild"))
        }
    }

    // `bindGen` needs to happen after `cargoBuild` since we're using the
    // macro based way of generating bindings from dynamic libraries
    tasks.named("bindGen") {
        it.dependsOn("cargoBuild")
    }
}

tasks.register("bindGen", Exec) {
    def outDir = "${projectDir}/../../shared_klc/src/androidBindings"

    workingDir "../../"

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine("cmd", "/c",
                """
                target\\debug\\uniffi-bindgen generate --library target/x86_64-linux-android/debug/libshared_klc.so \
                --language kotlin \
                --out-dir ${outDir.replace('/', '\\')}
                """
        )
    } else {
        commandLine("sh", "-c",
                """\
                target/debug/uniffi-bindgen generate --library target/x86_64-linux-android/debug/libshared_klc.so \
                --language kotlin \
                --out-dir $outDir
                """)
    }
}

// fixes `java.lang.UnsatisfiedLinkError: Error looking up function` that happens after modifying Rust source
// see https://github.com/mozilla/rust-android-gradle/issues/118#issuecomment-1777952460
tasks.matching { it.name.matches(/merge.*JniLibFolders/) }.configureEach {
    it.inputs.dir(new File(buildDir, "rustJniLibs/android"))
    it.dependsOn("cargoBuild")
}
